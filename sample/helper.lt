return \stripe ->

	-- to see what can be used in expand[], visit
	-- https://dashboard.stripe.com/test/subscriptions/sub_id...
	-- see Request query string parameters in browser devtool


	-- remain the same number for today, else idempotency key will complain
	var next_day = \timestamp ->
		-- https://stackoverflow.com/questions/9639642/how-to-round-unix-timestamp-up-and-down-to-nearest-half-hour
		--var lower = timestamp - math.fmod(timestamp, 24*60*60)
		var upper = timestamp + 24*60*60
		return upper


	var card_summary = \payment_method ->
		if payment_method
			var card = payment_method.card
			if card
				return {
					brand = card.brand
					, exp_month = card.exp_month
					, exp_year = card.exp_year
					, last4 = card.last4
					, fingerprint = card.fingerprint
				}


	var discounts_summary = \discs ->
		var discounts
		if discs and #discs > 0 -- return nil if empty, else become json object
			discounts = {}
			for i, d in ipairs(discs)
				var n
				if "table" == type(d.discount) -- if not expanded, it is string
					n = {
						name = d.discount.coupon.name
						, duration = d.discount.coupon.duration_in_months
						, percent = d.discount.coupon.percent_off
						, start = os.date("%Y-%m-%d", d.discount.start)
						, end = os.date("%Y-%m-%d", d.discount.end)
					}
				else
					n = {}
				n.amount = d.amount
				discounts[i] = n
		return discounts


	-- payment/setup intent
	var intent_summary = \i ->
		if i
			return {
				id = i.id
				, amount = i.amount
				, client_secret  = i.client_secret
				, description = i.description
				, next_action = i.next_action
				, status = i.status
				, usage = i.usage
			}


	var lines_summary = \inv_lines ->
		var lines
		if inv_lines
			lines = {}
			for i, l in ipairs(inv_lines.data)
				lines[i] = {
					amount = l.amount
					, currency = l.currency
					, quantity = l.quantity
					, description = l.description
					, priceid = l.price.id
					, nickname = l.price.nickname
					, unit_amount = l.price.unit_amount
					-- for sms/email there is no recurring, bcoz we did not utilise Usage API (interval nil)
					, interval = l.price.recurring and l.price.recurring.interval
					, usage_type = l.price.recurring and l.price.recurring.usage_type
					, subscription_itemid = l.subscription_item -- needed to view upcoming invoice if change plan
					, period = l.period
					, date = {
						start = os.date("%Y-%m-%d", l.period.start)
						, end = os.date("%Y-%m-%d", l.period.end)
					}
				}
				if l.discount_amounts
					lines[i].discounts = {}
					for j, d in ipairs(l.discount_amounts)
						lines[i].discounts[j] = d.amount

		return lines


	var customer_summary = \cust ->
		return {
			id = cust.id
			, name = cust.name
			, balance = cust.balance
			, created = os.date("%Y-%m-%d", cust.created)
			, invoice_settings = cust.invoice_settings
			, currency = cust.currency
		}



	var subscription_summary = \sub ->
		if sub
			var s = {
				id = sub.id
				-- period for getting email/sms sent
				--, current_period_start = sub.current_period_start
				--, current_period_end = sub.current_period_end
				, start = os.date("%Y-%m-%d", sub.current_period_start)
				, end = os.date("%Y-%m-%d", sub.current_period_end)
				, created = os.date("%Y-%m-%d", sub.created)
				, status = sub.status
				, days_until_due = sub.days_until_due
				, cancel_at = sub.cancel_at and os.date("%Y-%m-%d", sub.cancel_at)
				, canceled_at = sub.canceled_at and os.date("%Y-%m-%d", sub.canceled_at)
				, cancel_at_period_end = sub.cancel_at_period_end
			}
			if sub.discount -- deprecated
				var disc = sub.discount
				s.discount = disc.name
				s.value = disc.percent_off

			if sub.default_payment_method
				var pm = sub.default_payment_method
				var card = pm.card
				if card
					s.card = {
						brand = card.brand
						, exp_month = card.exp_month
						, exp_year = card.exp_year
						, last4 = card.last4
						, fingerprint = card.fingerprint
					}

			if sub.pending_update
				var pu = sub.pending_update
				s.pending_update = {
					expires_at = os.date("%Y-%m-%d", pu.expires_at)
					, subscription_items= {
						id= pu.subscription_items.id
						, price= pu.subscription_items.price
					}
				}

			s.items = {}
			if sub.items
				for k, itm in ipairs(sub.items.data)
					s.items[k] = {
						id = itm.id
						, created = os.date("%Y-%m-%d", itm.created)
						, price = itm.price
					}
					s.items[k].price.created = os.date("%Y-%m-%d", itm.price.created)

			return s


	var invoice_summary = \inv ->
		if inv
			var i = {
				created = os.date("%Y-%m-%d", inv.created)
				, number = inv.number
				, status = inv.status
				-- for past invoice, period from stripe is wrong. both 'start' and 'end' equals 'created'
				--, period = {
				--	start = inv.period_start
				--	, end = inv.period_end
				--}
				, amount = {
					due = inv.amount_due
					, paid = inv.amount_paid
					, remaining = inv.amount_remaining
				}
				, balance = {
					starting = inv.starting_balance
					, ending = inv.ending_balance
				}
				, subtotal = inv.subtotal
				, total = inv.total
				, download = inv.invoice_pdf
				, pay = inv.hosted_invoice_url
				, payment_intent = intent_summary(inv.payment_intent)
			}

			if inv.due_date
				i.due_date = os.date("%Y-%m-%d", inv.due_date)

			i.lines = lines_summary(inv.lines)

			-- expandables
			i.subscription = subscription_summary(inv.subscription)
			i.customer = customer_summary(inv.customer)
			i.discounts = discounts_summary(inv.total_discount_amounts)
			return i



	-- 2 http calls here!
	var update_customer_payment_method = \customerid, paymentmethodid ->
		var status, header, paymentmethod = stripe.payment_methods.attach(paymentmethodid, {
			customer = customerid
		})
		if status < 300
			return stripe.customers.update(customerid, {
				invoice_settings = {
					default_payment_method = paymentmethodid
				}
			})
		return status, header, paymentmethod


	-- one call to get payment method and latest invoice for a customer
	-- order decending by subscription creation timestamp, latest first. So metered sms must be created first, then main subscription later
	-- list may have more than 2, if customer changed, cancelled then resubscribe
	var latest_subscription = \customerid, expand ->
		var opt = {
			customer= customerid
			, status= 'all'
		}
		if expand
			opt.expand= {'data.default_payment_method'} --, 'data.latest_invoice'}  -- billing page will get invoice list anyway

		var status, header, subs = stripe.subscriptions.list(opt)
		if status < 300 and subs.data
			table.sort(subs.data, \a, b->
				return a.created > b.created  -- later first
			)
			return status, header, subscription_summary(subs.data[1])
		return status, header, subs


	return {

		subscription_summary = subscription_summary
		, invoice_summary = invoice_summary
		, intent_summary = intent_summary
		, card_summary = card_summary

		, get_customer = \id ->
			return stripe.customers.get(id, {
				expand = {'subscriptions', 'invoice_settings.default_payment_method'}
			})

		, create_customer = \idempotentkey, userid, email, phone, paymentmethodid ->
			var opt = {
				email = email
				, phone = phone
				, metadata = {'user.id' = userid}
			}

			if "string" == type(paymentmethodid)
				opt.payment_method = paymentmethodid
				opt.invoice_settings = {
					default_payment_method = paymentmethodid
				}
			return stripe.customers.create(opt, {['Idempotency-Key'] = idempotentkey})

		, update_customer_payment_method = update_customer_payment_method


		, list_payment_methods = \customerid ->
			return stripe.payment_methods.list({
				customer = customerid
				, type = 'card'
			})


		, setup_intent = \customerid ->
			return stripe.setup_intents.create({
				customer = customerid
			})


		------------------------------------- subscription --------------------------------------
		, latest_subscription = latest_subscription

		, get_subscription = \subscriptionid ->
			var status, _, subs = stripe.subscriptions.get(subscriptionid)
			if status < 300
				return status, _, subscription_summary(subs)
			return status, _, subs


		, update_subscription_payment_method = \subscriptionid, paymentmethodid ->
			return stripe.subscriptions.update(subscriptionid, {
				default_payment_method = paymentmethodid
				, expand = {'default_payment_method'}
			})


		-- extrapriceids are one time items like setup fees etc
		, create_subscription = \idempotentkey, customerid, paymentmethodid, priceids, extrapriceids, couponid, metadata, threshold_gte, trial_period ->
			var opt = {
				customer = customerid
				, default_payment_method = paymentmethodid
				-- must expand latest_invoice
				, expand = {'latest_invoice.payment_intent'}
				, items = {}
			}

			for i, p in ipairs(priceids)
				opt.items[i] = {price = p}

			if threshold_gte
				opt.billing_thresholds = {
					amount_gte = threshold_gte
					, reset_billing_cycle_anchor = false
				}

			if extrapriceids  -- one time fee
				for i, p in ipairs(extrapriceids)
					opt.add_invoice_items = {
						{price = p}
					}

			if trial_period
				opt.trial_period_days = trial_period

			opt.coupon = couponid
			-- for webhook to reward referrer (if any)
			opt.metadata = metadata
			return stripe.subscriptions.create(opt, {['Idempotency-Key'] = idempotentkey})


		-- cancel the latest subscription
		, cancel_subscription = \subscriptionid, immediate ->
			-- cancel the plan, prorate and minus meter (in webhook invoice.created), then refund
			if immediate
				return stripe.subscriptions.delete(subscriptionid, {
					prorate = true
					, invoice_now = true
				})
			return stripe.subscriptions.update(subscriptionid, {
				cancel_at_period_end = true
			})

		, uncancel_subscription = \subscriptionid ->
			-- only works if cancel_at_period_end was true earlier and havent reach
			return stripe.subscriptions.update(subscriptionid, {
				cancel_at_period_end = false
			})


		-- change the latest subscription
		-- TODO: sms price changed...
		-- must match get_upcoming_invoice() settings
		, change_subscription = \idempotentkey, subscriptionid, fixed, metered, priceids ->
			var opt = {
				payment_behavior = 'allow_incomplete'   --'error_if_incomplete' will prevent 3DS confirmation popup
				, proration_date = next_day(ngx.time())
				, billing_cycle_anchor = 'now'
				, proration_behavior = 'always_invoice'
				, expand = {'latest_invoice.payment_intent'}
				, items = {}
			}
			if fixed
				opt.items[2] = {id = fixed.subscription_itemid, deleted = true}

			-- add outstanding meter usage and remove it
			if metered
				opt.items[1] = {id = metered.subscription_itemid, deleted = true, clear_usage = true}
				--`` Stripe adds unbilled usage for us
				opt.add_invoice_items = {
					{price = metered.priceid, quantity = fixed.quantity}
				}
				``

			if priceids
				var n = #opt.items
				for i, newid in ipairs(priceids)
					opt.items[i + n] = {price = newid}

			return stripe.subscriptions.update(subscriptionid, opt, {['Idempotency-Key'] = idempotentkey})

		--------------------- invoice ----------------------

		-- if meter given, add old meter charges as invoice item and and clear its subscription item usage
		-- either customerid or subscriptionid, one is optional
		, get_upcoming_invoice = \customerid, subscriptionid, fixed, metered, priceids ->
			var opt
			if fixed or metered or priceids  -- preview change
				opt = {
					subscription_proration_date = next_day(ngx.time())
					, subscription_billing_cycle_anchor = 'now'
					, subscription_proration_behavior = 'always_invoice'
					, expand= {'total_discount_amounts.discount'}
					, subscription_items = {}
				}
				if fixed
					opt.subscription_items[1] = {id = fixed.subscription_itemid, deleted = true}

				if metered
					opt.subscription_items[2] = {id = metered.subscription_itemid, deleted = true, clear_usage = true}
					--`` add meter outstanding from earlier invoice
					-- No Need, Stripe adds unbilled usage for us
					if metered.quantity > 0
						opt.invoice_items = {
							{
								description = metered.description
								, unit_amount = metered.unit_amount
								, quantity = metered.quantity
								, period = metered.period
								, currency = metered.currency
							}
						}
					``

				if priceids
					var n = #opt.subscription_items
					for i, newid in ipairs(priceids)
						opt.subscription_items[i + n] = {price = newid, deleted = false}

			else -- not changing
				opt = {
					expand= {'subscription', 'customer.invoice_settings.default_payment_method', 'total_discount_amounts.discount'}
				}

			opt.customer = customerid
			opt.subscription = subscriptionid
			var status, _, invoice = stripe.invoices.upcoming(opt)
			if status < 300
				return status, _, invoice_summary(invoice)
			return status, _, invoice


		, list_invoices = \customerid, limit ->
			var status, _, invoices  = stripe.invoices.list({customer = customerid, limit = limit or 12})
			if status < 300
				-- debug
				-- out.real_invoices = invoices
				var invs = {}
				for k, inv in ipairs(invoices.data)
					invs[k] = invoice_summary(inv)
				return status, _, invs
			return status, _, invoices


		, retry_invoice = \invoiceid, customerid, paymentmethodid ->
			var status, header, customer = update_customer_payment_method(customerid, paymentmethodid)
			if status < 300
				return stripe.invoices.get(invoiceid, {
					expand = {'payment_intent'}
				})
			return status, header, customer


		--------------------- Promo code -----------------------
		-- only couponid is required
		, new_promo_code = \couponid, code, max_use, expire, first_timer ->
			var opt = {
				coupon = couponid
				, code = code
				, max_redemptions = max_use
				, expires_at = expire
				, restrictions = {
					first_time_transaction = first_timer
				}
			}
			return stripe.promotion_codes.create(opt)


		, create_usage = \idempotentkey, usageitemid, quantity, action ->
			assert(not action or action == 'set' or action == 'increment')
			return stripe.subscription_items.usage(usageitemid, {
				quantity = quantity
				, action = action or 'increment'
				, timestamp = ngx.time()
			}, {['Idempotency-Key'] = idempotentkey})


	}

